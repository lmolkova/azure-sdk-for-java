{{- include "stress-test-addons.deploy-job-template.from-pod" (list . "stress.deploy-example") -}}
{{- define "stress.deploy-example" -}}
metadata:
  labels:
    chaos: "{{ default false .Stress.chaos }}"
    testInstance: "{{.Stress.Scenario}}-{{ .Stress.BaseName }}-{{ .Release.Revision }}"
spec:
  containers:
    - name: main
      image:  {{ .Stress.imageTag }}
      command: ['sh', '-c']
      args:
        - |
          set -exa;
          mkdir -p "$DEBUG_SHARE";
          . /mnt/outputs/.env;
          export AZURE_HTTP_LOG_DETAIL_LEVEL="HEADERS";
          export AZURE_LOG_LEVEL="INFO";
          export APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_LEVEL="DEBUG";
          export APPLICATIONINSIGHTS_ROLE_NAME=storage-{{ .Stress.BaseName }};
          java \
          -javaagent:BOOT-INF/classes/applicationinsights-agent-3.4.17.jar \
          -Dasync={{ default false .Stress.async }} \
          -DfaultInjection={{ default false .Stress.faultInjection }} \
          -DblobSizeBytes={{ .Stress.blobSizeBytes }} \
          -DtestTime={{ .Stress.testTime }} \
          -Dparallel={{ .Stress.parallel }} \
          -Djdk.tls.client.protocols="TLSv1.3" \
          -Dhttps.protocols="TLSv1.3" \
          -jar /app/azure-storage-blob-stress-1.0.0-beta.1-jar-with-dependencies.jar \
          {{ .Stress.testTarget }} \
          2>&1 | tee -a "${DEBUG_SHARE}/{{ .Stress.Scenario }}-`date +%s`.log";

      # Pulls the image on pod start, always. We tend to push to the same image and tag over and over again
      # when iterating, so this is a must.
      imagePullPolicy: Always
      # More about this section here:
      # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
      #
      # Note that I'm only setting 'limits' and not 'requests'. If 'requests' is missing it
      # just uses 'limits' for both.
      resources:
        limits:
          memory: 4000Mi
          cpu: "2.0"
      {{- include "stress-test-addons.container-env" . | nindent 6 }}
{{- end -}}

{{- include "stress-test-addons.chaos-wrapper.tpl" (list . "stress.network-chaos") -}}
{{- define "stress.network-chaos" -}}
apiVersion: chaos-mesh.org/v1alpha1
kind: Workflow
metadata:
  name: servicebus-killer-workflow
spec:
  entry: parallel-profile
  templates:
    - name: parallel-profile
      templateType: Parallel
      deadline: 1h
      children:
        - delay
        - bandwidth
    - name: delay
      templateType: NetworkChaos
      networkChaos:
        deadline: 1h
        direction: to
        externalTargets:
          - alzimmertls13v2.blob.core.windows.net
        mode: all
        selector:
          namespaces:
            - {{ .Release.Namespace }}
          labelSelectors:
            testInstance: "{{.Stress.Scenario}}-{{ .Stress.BaseName }}-{{ .Release.Revision }}"
            chaos: "true"
        action: delay
        delay:
          latency: '200ms'
          correlation: '60'
          jitter: '2000ms'
        target:
          selector:
            namespaces:
              - {{ .Release.Namespace }}
            labelSelectors:
              testInstance: "{{.Stress.Scenario}}-{{ .Stress.BaseName }}-{{ .Release.Revision }}"
              chaos: "true"
          mode: all
    - name: bandwidth
      templateType: NetworkChaos
      networkChaos:
        direction: to
        externalTargets:
          - alzimmertls13v2.blob.core.windows.net
        mode: all
        selector:
          namespaces:
            - {{ .Release.Namespace }}
          labelSelectors:
            testInstance: "{{.Stress.Scenario}}-{{ .Stress.BaseName }}-{{ .Release.Revision }}"
            chaos: "true"
        action: bandwidth
        bandwidth:
          rate: '10kbps'
          limit: 50000  #recommended to set to at least 2 * rate * latency (2 * 10kbps * 2sec at max = 40kb at max)
          buffer: 100000 #100kb
        target:
          selector:
            namespaces:
              - {{ .Release.Namespace }}
            labelSelectors:
              testInstance: "{{.Stress.Scenario}}-{{ .Stress.BaseName }}-{{ .Release.Revision }}"
              chaos: "true"
          mode: all
{{- end -}}
